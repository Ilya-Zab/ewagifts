import Head from "next/head";
import { CartTable } from "@/components/Shop/CartTable";
import { useAppSelector } from "@/hooks/redux";
import { useEffect, useState } from "react";
import { CartSummary } from "@/components/Shop/CartSummary";
import { Box } from "@mui/material";
import { useCreateOrderWoo } from "@/hooks/useCreateOrderWoo";
import { useUpdateOrderWoo } from "@/hooks/useUpdateOrderWoo";
import { AddCoupon } from "@/components/Shop/AddCoupon";
import { Section } from "@/components/Layouts/Section";
import { Loader } from "@/components/Layouts/Loader";
import styles from './styles.module.scss';
const Cart = () =>
{
    const { items, isLoading } = useAppSelector(state => state.Cart);
    const { currentOrder: { orderId, productLineIds } } = useAppSelector(state => state.currentOrder);
    const { createOrder, isLoading: isCreatingOrder, createdOrder } = useCreateOrderWoo();
    const { updateOrder, isLoading: isUpdatingOrder, updatedOrder } = useUpdateOrderWoo();
    const [products, setProducts] = useState(null);
    const [total, setTotal] = useState('0');
    const [isUpdating, setIsUpdating] = useState(false);

    useEffect(() =>
    {
        if (items && items.length > 0)
        {
            if (!orderId)
            {
                createOrder(items);
            } else if (productLineIds && !isUpdatingOrder && !isUpdating)
            {
                setIsUpdating(true);
                updateOrder(productLineIds, items, orderId);
                setIsUpdating(false);
            }
        }
    }, [items]);

    useEffect(() =>
    {
        if (createdOrder)
        {
            setTotal(createdOrder.total);
            setProducts(createdOrder.line_items);
        }
    }, [createdOrder]);

    useEffect(() =>
    {
        if (updatedOrder)
        {
            setTotal(updatedOrder.total);
            setProducts(updatedOrder.line_items);
        }
    }, [updatedOrder]);


    if (isCreatingOrder || isUpdatingOrder)
    {
        return <Loader size={100} thickness={4} />
    }

    return (
        <>
            <Head>
                <title>Shopping cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Section className="section" isContainer={true}>
                    <h1>Koszyk</h1>
                    <Box className={styles.Cart__content}>
                        <Box>
                            {products && <CartTable products={products} isLoading={isLoading} />}
                            <AddCoupon orderId={orderId && orderId} />
                        </Box>
                        <CartSummary total={total} sum={total} isLoading={isLoading} />
                    </Box>
                </Section>
            </main >
        </>
    );
}

export default Cart;