// import { useRouter } from "next/router";
import Head from "next/head";
import { CartTable } from "@/components/Shop/CartTable";
import { useAppDispatch, useAppSelector } from "@/hooks/redux";
import { useEffect } from "react";
import { fetchCartRows } from "@/store/reducers/CartSlice";
import { CartSummary } from "@/components/Shop/CartSummary";
import { Box } from "@mui/material";
import { useFetchCreateOrderMutation } from "@/store/wooCommerce/wooCommerceApi";
import { setCurrentOrder } from "@/store/reducers/CurrentOrder";

const Product = () =>
{
    // const router = useRouter();
    // const { slug } = router.query;

    const { items, totals, cartRows, isLoading } = useAppSelector(state => state.Cart);
    const currentOrderSlice = useAppSelector(state => state.currentOrderSlice);
    const dispatch = useAppDispatch();

    const [fetchCreateOrder, { data: newOrder }] = useFetchCreateOrderMutation();

    useEffect(() =>
    {
        if (items.length > 0)
        {
            dispatch(fetchCartRows(items));
            if (!currentOrderSlice.currentOrder)
            {
                fetchCreateOrder(transformCreateOrderProducts(items));
                if (newOrder)
                {
                    dispatch(setCurrentOrder(newOrder.id));
                }
            }
        }
    }, [currentOrderSlice.currentOrder, dispatch, fetchCreateOrder, items, newOrder]);

    if (newOrder)
    {
        console.log(newOrder.id);
    }

    // line_items: [
    //     {
    //       product_id: 93,
    //       quantity: 2
    //     },
    //     {
    //       product_id: 22,
    //       variation_id: 23,
    //       quantity: 1
    //     }
    //   ],

    // if (items)
    // {
    //     console.log(transformCreateOrderProducts(items));
    // }

    function transformCreateOrderProducts(products)
    {
        return products.reduce((acc, product) =>
        {
            if (product.type === 'variable')
            {
                product.options.forEach(item =>
                {
                    acc.push({
                        product_id: product.id,
                        variation_id: item.id,
                        quantity: item.quantity
                    })
                })
            } else
            {
                acc.push({
                    product_id: product.id,
                    quantity: product.quantity
                })
            }
            return acc;
        }, [])
    }

    // useEffect(() =>
    // {
    //     if (data)
    //     {
    //         console.log(data.id);
    //         dispatch(updateCurrentOrder(data.id));
    //     }
    // }, [data, dispatch]);

    return (
        <>
            <Head>
                <title>Shopping cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <section className="section">
                    <h1>Koszyk</h1>
                    <Box display={"flex"}>
                        <CartTable products={cartRows} isLoading={isLoading} />
                        <CartSummary total={totals.total} sum={totals.total} isLoading={isLoading} />
                        {/* <button onClick={() => fetchCreateOrder(object)}>Create</button> */}
                    </Box>
                </section>
            </main >
        </>
    );
}

export default Product;