// import { useRouter } from "next/router";
import Head from "next/head";
import { CartTable } from "@/components/Shop/CartTable";
import { useAppDispatch, useAppSelector } from "@/hooks/redux";
import { useEffect } from "react";
import { CartSummary } from "@/components/Shop/CartSummary";
import { Box } from "@mui/material";
import { useCreateOrderWoo } from "@/hooks/useCreateOrderWoo";
import { useUpdateOrderWoo } from "@/hooks/useUpdateOrderWoo";
import { AddCoupon } from "@/components/Shop/AddCoupon";
import { Section } from "@/components/Layouts/Section";

const Product = () =>
{
    // const router = useRouter();
    // const { slug } = router.query;
    const dispatch = useAppDispatch();
    const { items, totals, cartRows, isLoading } = useAppSelector(state => state.Cart);
    const { currentOrder: { orderId, productLineIds } } = useAppSelector(state => state.currentOrderSlice);
    const { createOrder, isLoading: isCreatingOrder, error: isCreateOrderError } = useCreateOrderWoo();
    const { updateOrder } = useUpdateOrderWoo();

    useEffect(() =>
    {
        if (items.length > 0)
        {
            if (!orderId)
            {
                createOrder(
                    [
                        {
                            id: 46817,
                            quantity: 2,
                            type: "simple"
                        },
                        {
                            options: [
                                {
                                    id: 43111,
                                    quantity: 10,
                                },
                                {
                                    id: 43106,
                                    quantity: 20,
                                }
                            ],
                            id: 43081,
                            quantity: 0,
                            type: "variable"
                        },
                    ],
                )
                if (isCreatingOrder)
                {
                    console.log('Loading...');
                }
                if (isCreateOrderError)
                {
                    console.log(isCreateOrderError);
                }
            } else
            {
                if (!productLineIds) return;
                updateOrder(productLineIds, [
                    {
                        id: 46817,
                        quantity: 30,
                        type: "simple"
                    },
                ], orderId);
            }
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [dispatch, items, orderId]);

    return (
        <>
            <Head>
                <title>Shopping cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Section className="section" isContainer={true}>
                    <h1>Koszyk</h1>
                    <Box display={"flex"}>
                        <CartTable products={cartRows} isLoading={isLoading} />
                        <CartSummary total={totals.total} sum={totals.total} isLoading={isLoading} />
                    </Box>
                    <AddCoupon orderId={orderId && orderId} />
                </Section>
            </main >
        </>
    );
}

export default Product;